@using System.Collections.ObjectModel
@using System.Collections.Specialized
@*
    // Rong Zhou
*@
@inject RulesEngineEditor.Services.WorkflowService WorkflowService

@if (context != null)
{
    if (context.Count > 0)
    {
        <sp_grid_ckvp>
            <div>Name</div>
            <div>Value</div>
        </sp_grid_ckvp>
    }
    <Dropzone TItem="DictItem" Items="@contextCollection" OnItemDrop="@((i)=>ItemDragEnd(i))">
        <ActionInfoContextItemEditor item="@context" ContextDelete="ContextDelete"/>
    </Dropzone>
}
@code {
    private IDictionary<string, object> _context;
    [Parameter]
    public IDictionary<string, object> context { 
        get { return _context; } 
        set {
            _context = value;
            contextCollection = value?.ToObservableCollection(
                (item, e) => {
                    // find the old item
                    var oldKey = ((KeyValuePair<string, object>)(e.OldValue)).Key;
                    // compare oldKey and newKey
                    var newKey = ((KeyValuePair<string, object>)(e.NewValue)).Key;
                    if (oldKey != newKey)
                    {
                        // remove and add new value
                        _context.Remove(oldKey);
                        _context.Add((KeyValuePair<string, object>)(e.NewValue));

                        // fire event
                        ContextChanged.InvokeAsync(context);
                    } else {
                        // two keys are the same, compare values
                        if (((KeyValuePair<string, object>)(e.NewValue)).Value != ((KeyValuePair<string, object>)(e.OldValue)).Value) {
                            _context[((KeyValuePair<string, object>)(e.NewValue)).Key] = ((KeyValuePair<string, object>)(e.NewValue)).Value;

                            // fire event
                            ContextChanged.InvokeAsync(context);
                        }
                    }
                },
                UpdateContext);
            if (contextCollection != null)
                contextCollection.CollectionChanged += UpdateContext;
        }
    }

    [Parameter]
    public EventCallback<IDictionary<string, object>> ContextChanged { get; set; }

    private ObservableCollection<DictItem> contextCollection;

    private void ContextDelete(DictItem sp)
    {
        if (context.Count <= 1)
        {
            // cannot have empty dictionary
        }
        else
        {
            context.Remove(sp.Key);
            ContextChanged.InvokeAsync(context);
        }
    }

    private void UpdateContext(object? sender, NotifyCollectionChangedEventArgs e) 
    {
        // synchronize context with contextCollection
        foreach (var oi in e.OldItems)
        {
            string oldKey = ((DictItem)oi).Key;
            _context.Remove(oldKey);
        }
        foreach (var ni in e.NewItems)
        {
            var item = new KeyValuePair<string, object>(
                ((DictItem)ni).Key,
                ((DictItem)ni).Value
            );
            _context.Add(item);
        }
        // fire event
        ContextChanged.InvokeAsync(context);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void ItemDragEnd(DictItem sp)
    {
        ContextChanged.InvokeAsync(context);
    }
}
