@using System.Collections.ObjectModel
@using System.Collections.Specialized
@*
    // Rong Zhou
*@
@inject RulesEngineEditor.Services.WorkflowService WorkflowService

@if (context != null)
{
    if (context.Count > 0)
    {
        <sp_grid_ckvp>
            <div>Context Name</div>
            <div>Value</div>
            @foreach (var cItem in context)
            {
                <ActionInfoContextItemEditor key="@cItem.Key" value="@cItem.Value"/>
            }
        </sp_grid_ckvp>
    }
    <Dropzone TItem="DictItem" Items="@contextCollection" OnItemDrop="@((i)=>ItemDragEnd(i))">
        <ActionInfoContextItemEditor item="@context" />
    </Dropzone>
}
@code {
    private IDictionary<string, object> _context;
    [Parameter]
    public IDictionary<string, object> context { 
        get { return _context; } 
        set {
            _context = value;
            contextCollection = value.ToObservableCollection(
                (item, e) => {
                    // find the old item
                    var oldKey = ((KeyValuePair<string, object>)(e.OldValue)).Key;
                    // remove and add new value
                    _context.Remove(oldKey);
                    _context.Add((KeyValuePair<string, object>)(e.NewValue));
                },
                (collection, e) => {
                    foreach(var oi in e.OldItems) {
                        string oldKey = ((DictItem)oi).Key;
                        _context.Remove(oldKey);
                    }
                    foreach(var ni in e.NewItems) {
                        var item = new KeyValuePair<string, object>(
                            ((DictItem)ni).Key,
                            ((DictItem)ni).Value
                        );
                        _context.Add(item);
                    }
                });
            contextCollection.CollectionChanged += UpdateContext;
        }
    }

    private ObservableCollection<DictItem> contextCollection;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    private void UpdateContext(object? sender, NotifyCollectionChangedEventArgs e) 
    {
        // synchronize context with contextCollection

    }
}
